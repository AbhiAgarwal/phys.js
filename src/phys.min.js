(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){basic=exports;basic.understand=function(){return"Name: The name of the Function\n"+"Inputs: The inputs you need for the Function\n"+"Equation: The mathematical equation of the Function"};basic.self=function(){return"The 'self' before a function name just means that you've to calculate some of the values yourself."};basic.changein=function(){return"Change in numbers\n"+"Input: Number1, Number2\n"+"Change in numbers = Number2 - Number1"};basic.twosig=function(){return"Two Decimal Figures\n"+"Input: One Number\n"+"Shortens Number to 2 Decimal Places"};basic.toDegrees=function(){return"Radians To Degrees\n"+"Input: One Number\n"+"To Degrees = Number * (180 / Math.PI)"};basic.toRadians=function(){return"Degrees to Radians\n"+"Input: One Number\n"+"To Radians = Number * (Math.PI / 180)"}},{}],2:[function(require,module,exports){electromagnetic=exports;electromagnetic.KineticEnergy=function(){return"Kinetic Energy\n"+"Inputs: Mass, Velocity\n"+"Kinetic Energy = (1/2) * (Mass * Velocity^2)"};electromagnetic.selfKineticEnergy=function(){return"Kinetic Energy\n"+"Input: Mass, Velocity \n"+"Does not square velocity: You have to yourself.\n"+"Kinetic Energy = (1/2) * (Mass * Velocity)"};electromagnetic.current=function(){return"Rate at which charge flows through a given surface\n"+"Input: Charge One, Charge Two, Time One, Time Two\n"+"Current = (Charge Two - Charge One) / (Time2 - Time1)"};electromagnetic.ohmicResistance=function(){return"Resistance of an Ohmic resistor\n"+"Input: Voltage, Current\n"+"Resistance = Voltage / Current"};electromagnetic.resistivity=function(){return"Resistivity - tendancy of a material to resist charge\n"+"Input: Resistance, Cross-sectional area, Length\n"+"Resistivity = Resistance * Area / Length"};electromagnetic.viPower=function(){return"Power - Energy consumed per unit time\n"+"Input: Voltage, Current\n"+"Power = Voltage * Current"};electromagnetic.irPower=function(){return"Power - Energy consumed per unit time\n"+"Input: Current, Resistance\n"+"Power = (Current^2) * Resistance"};electromagnetic.selfirPower=function(){return"Calculated Power - Energy consumed per unit time\n"+"Input: Current, Resistance\n"+"Does not square current: You have to yourself.\n"+"Power = (Current) * Resistance"};electromagnetic.vPower=function(){return"Power - Energy consumed per unit time\n"+"Input: Voltage, Resistance\n"+"Power = (Voltage^2) / Resistance"};electromagnetic.selfvPower=function(){return"Calculated Power - Energy consumed per unit time\n"+"Input: Voltage, Resistance\n"+"Does not square voltage: You have to yourself.\n"+"Power = (Voltage) / Resistance"};electromagnetic.emf=function(){return"Electromotive Force - Voltage generated by a battery\n"+"Input: Current, Resistance, Internal resistance of battery\n"+"Electromotive Force = Current * (Resistance + Internal resistance of battery)"};electromagnetic.series=function(){return"Sum of resistance components connected in series\n"+"Input: Array of resistance values\n"+"Sum of resistance components = (Adding all resistances in the Array)"};electromagnetic.parallel=function(){return"Sum of resistance components connected in parallel\n"+"Input: Array of resistance values\n"+"Sum of resistance components = 1 / (Adding all resistances in the Array)"};electromagnetic.fluxComponent=function(){return"Component of B-field passing through a surface area A at an angle\n"+"Input: B-field Strength, Surface area of surface, Angle (Degrees)\n"+"Magnetic Flux = B-field Strength * Surface area of surface * cos(Angle)"};electromagnetic.inducedEmf=function(){return"Induced voltage by moving a rod of length l through a B-field of velocity v\n"+"Input: B-field Strength, Velocity of rod, Length\n"+"inducedEmf = B-field Strength * Velocity * Length"};electromagnetic.gauss=function(){return"Gauss' Law: Rate of flow of electric field (Electric flux) through a closed surface with an arbitrary volume\n"+"Input: Total charge enclosed within the surface, Coulomb constant\n"+"guassFlux = Total charge enclosed within the surface / Coulomb constant "};electromagnetic.coilEmf=function(){return"Faraday's Law: Induced emf generated by moving coil in B-field\n"+"Input: Number of turns in coil, 2 Magnetic fluxs (magFlux1, magFlux 2), 2 Time intervals (t1, t2)\n"+"coilEmf = - (Number of turns in coil) * ((magFlux2 - magFlux1) / (time2 - time1))"}},{}],3:[function(require,module,exports){energy=exports;energy.power=function(){return"Power\n"+"Inputs: Area, Density, Wind speed\n"+"Power = 1/2 * (Area * Density * (Wind Speed)^3)"};energy.selfpower=function(){return"Calculated Power\n"+"Inputs: Area, Density, Wind speed^3\n"+"You've to input the (Wind Speed)^3 Yourself\n"+"Power = 1/2 * (Area * Density * (Wind Speed))"};energy.powerLength=function(){return"Power per Unit Length\n"+"Inputs: Area, Density, Wind speed\n"+"Power per Unit Length = Area^2 * Density * Gravitational Constant * Wind speed"};energy.selfpowerLength=function(){return"Calculated Power per Unit Length\n"+"Inputs: Area, Density, Gravitational Constant, Wind speed^3\n"+"You've to input the (Wind Speed)^3, and Gravitational Constant Yourself\n"+"Power per Unit Length = Area * Density * Gravitational Constant * Wind speed"};energy.intensity=function(){return"Intensity\n"+"Inputs: Power, Area\n"+"Intensity = Power / Area"};energy.albedo=function(){return"Albedo\n"+"Inputs: Total Scattered Power, Total Incident Power\n"+"Albedo = Total Scattered Power / Total Incident Power"};energy.transfersurface=function(){return"Total Energy Transfer\n"+"Inputs: Surface Heat Capacity, Area, Initial Time, Final time\n"+"Total Energy Transfer = Surface Heat Capacity * Area * (Final time - Initial Time)"};energy.surfaceheat=function(){return"Surface Heat Capacity\n"+"Inputs: Total Energy Transfer as Heat, Area, Initial Time, Final time\n"+"Surface Heat Capacity = (Total Energy Transfer) / (Area * (Final Time - Initial Time))"}},{}],4:[function(require,module,exports){fields=exports;fields.gravitationalForce=function(){return"Gravitational Force\n"+"Inputs: Mass of First Object, Mass of Second Object, Radius\n"+"Gravitational Force = Gravitational Constant * ((Mass of First Object * Mass of Second Object) / Radius^2)"};fields.selfGravitationalForce=function(){return"Gravitational Force\n"+"Inputs: Mass of First Object, Mass of Second Object, Radius, Gravitation Constant\n"+"You've to input the Gravitational Constant yourself\n"+"Gravitational Force = Gravitational Constant * ((Mass of First Object * Mass of Second Object) / Radius^2)"};fields.coulombForce=function(){return"Coulomb's Law\n"+"Inputs: Charge of First Object, Charge of Second Object, Radius\n"+"Gravitational Force = Coulombs Constant * ((Charge of First Object * Charge of Second Object) / Radius^2)"};fields.selfCoulombForce=function(){return"Calculated Coulomb's Law\n"+"Inputs: Charge of First Object, Charge of Second Object, Radius, Coulomb constant\n"+"Gravitational Force = Coulombs Constant * ((Charge of First Object * Charge of Second Object) / Radius^2)"};fields.gravitationalAcceleration=function(){return"Gravitational Acceleration\n"+"Inputs: Force, Mass\n"+"Acceleration = Force / Mass"};fields.electricField=function(){return"Electric Field\n"+"Inputs: Force, Charge\n"+"Acceleration = Force / Charge"};fields.gradElectricField=function(){return"Electric Field from change in Electric potential energy V with respect to position\n"+"Inputs: Two Electric potential energys (v1, v2), Two Positions (x1, x2)\n"+"Electric Field Strength = - (v2 - v1) / (x2 - x1)"};fields.gradGravField=function(){return"Gravitational Field from change in Gravitational potential energy V with respect to position\n"+"Inputs: Two Gravitational potential energys (v1, v2), Two Positions (x1, x2)\n"+"Gravitational Field Strength = - (u2 - u1) / (x2 - x1)"};fields.particleMagneticForce=function(){return"Magnetic force F exerted on a particle passing through B-field\n"+"Inputs: Charge, Velocity, B-field strength, Angle between B-field and path of particle (degree)\n"+"Force = Charge * Velocity * B-field strength * sin(Angle)"};fields.conductorMagneticForce=function(){return"Magnetic force F exerted on a current-carrying conductor in a B-field\n"+"Inputs: B-field strength, Current, Length, Angle between B-field and path of particle (degrees)\n"+"Force = B-field strength * Current * Length * sin(Angle)"};fields.particleGravitationalPotentialEnergy=function(){return"Gravitational potential energy of a particle m in a gravitatonal field formed by a body of mass M\n"+"Inputs: Particle mass, Source mass, Seperation from source mass\n"+"Gravitational potential energy = - Gravitational Constant * (Particle mass * Source mass / Seperation from source mass)"};fields.selfparticleGravitationalPotentialEnergy=function(){return"Calculated Gravitational potential energy of a particle m in a gravitatonal field formed by a body of mass M\n"+"Inputs: Particle mass, Source mass, Seperation from source mass, Gravitational Constant\n"+"Gravitational potential energy = - Gravitational Constant * (Particle mass * Source mass / Seperation from source mass)"};fields.gravitationalPotentialEnergy=function(){return"Gravitational potential energy of an arbitrary pont in a gravitatonal field formed by a body of mass M\n"+"Inputs: Source mass, Seperation from source mass\n"+"Gravitational potential energy = - Gravitational Constant * (Source mass / Seperation from source mass)"};fields.escapeVelocity=function(){return"Velocity required for a body of to escape the orbit of a planet of mass M\n"+"Inputs: Mass of planet, Radius of planet\n"+"Escape Velocity = sqrt(2 * Gravitational Constant (Mass of planet / Radius of planet))"};fields.chargeElectricPotentialEnergy=function(){return"Electric potential of a test charge q in an electric field formed by a charge Q at a distance r\n"+"Inputs: Test charge, Source charge, Separation\n"+"Electric potential = (Coulomb Constant * Test charge * Test charge)/ Separation"};fields.electricPotentialEnergy=function(){return"Electric potential of an arbitrary point in an electric field formed by a charge Q at a distance r\n"+"Inputs: Source charge, Separation\n"+"Electric potential = (Coulomb Constant * Test charge)/ Separation"}},{}],5:[function(require,module,exports){mechanics=exports;mechanics.momentum=function(){return"The Momentum Function\n"+"Inputs are: Mass & Velocity.\n"+"Momentum = Mass * Velocity."};mechanics.force=function(){return"The Force Function\n"+"Input is: Mass.\n"+"Force = Mass * Acceleration."};mechanics.selfForce=function(){return"The Calculated Force Function\n"+"Inputs are: Mass, and Acceleration.\n"+"You have to input your own Gravitation Acceleration\n"+"Force = Mass * Acceleration."};mechanics.forceMomentum=function(){return"The Calculated Force Equation - using Momentum\n"+"Inputs are: Initial Momentum: Initial Velocity, Initial Mass, Final Momentum: Final Velocity, Finaly Mass, Initial Time, Final Time.\n"+"Force = (Momentum(Final Mass, Final Velocity) - Momentum(Initial Mass, Initial Velocity)) / (Final Time - Initial Time)"};mechanics.selfForceMomentum=function(){return"The Force Equation - using Momentum\n"+"Inputs are: Initial Momentum, Final Momentum, Initial Time, Final Time.\n"+"Force = (Final Momentum - Initial Momentum) / (Final Time - Initial Time)"};mechanics.SUVATuta=function(){return"The SUVAT Displacement Function\n"+"Inputs are: Initial Velocity, Time, Acceleration.\n"+"Displacement = Initial Velocity * Time + 1/2 * Acceleration * Time^2"};mechanics.SUVATuvt=function(){return"The SUVAT Displacement Function\n"+"Inputs are: Initial Velocity, Final Velocity, Time.\n"+"Displacement = 1 / 2 * (Initial Velocity + Final Velocity) * Time"};mechanics.SUVATvta=function(){return"The SUVAT Displacement Function\n"+"Inputs are: Acceleration, Final Velocity, Time.\n"+"Displacement = Final Velocity * Time - (1 / 2 * Acceleration * Time^2)"};mechanics.SUVATuat=function(){return"The SUVAT Velocity Function\n"+"Inputs are: Initial Velocity, Acceleration, Time.\n"+"Velocity = Initial Velocity + (Acceleration * Time)"};mechanics.SUVATuas=function(){return"The SUVAT Velocity Function\n"+"Inputs are: Initial Velocity, Acceleration, Displacement.\n"+"Velocity^2 = (Initial Velocity)^2 + (2 * Acceleration * Displacement)"};mechanics.selfSUVATuas=function(){return"The SUVAT Velocity Function\n"+"Inputs are: Initial Velocity, Acceleration, Displacement.\n"+"Velocity = SquareRoot((Initial Velocity)^2 + (2 * Acceleration * Displacement))"};mechanics.impulseMass=function(){return"The Impuse Function - using Mass\n"+"Inputs are: Mass, Initial Velocity, Final Velocity.\n"+"Impulse = Mass * (Final Velocity - Initial Velocity)"};mechanics.impulseForce=function(){return"The Impuse Function - using Force\n"+"Inputs are: Force, Initial Time, Final Time.\n"+"Impulse = Force * (Final Time - Initial Time)"};mechanics.workDone=function(){return"The Work Done Function\n"+"Inputs are: Force, Displacement, Angle.\n"+"Work Done = Force * Displacement * cos(Angle)"};mechanics.kineticVelocity=function(){return"The Kinetic Energy Equation - with Velocity\n"+"Inputs are: Velocity, Mass.\n"+"Kinetic Energy = 1/2 * Mass * Velocity^2"};mechanics.kineticMomentum=function(){return"The Calculated Kinetic Energy Equation - with Momentum\n"+"Inputs are: Velocity, Mass.\n"+"Kinetic Energy = Momentum(Mass, Velocity) / (2 * Mass)"};mechanics.selfKineticMomentum=function(){return"The Kinetic Energy Equation - with Momentum\n"+"Inputs are: Momentum, Mass.\n"+"You have to input the Momentum:\n"+"Kinetic Energy = Momentum^2 * (2 * Mass)"};mechanics.potential=function(){return"The Potential Energy Equation\n"+"Inputs are: Mass, Initial Height, Final Height.\n"+"Potential Energy = Mass * Gravitational Constant * (Final Height - Initial Height)"};mechanics.selfPotential=function(){return"The Calculated Potential Energy Equation\n"+"Inputs are: Mass, Gravitational Constant, Initial Height, Final Height.\n"+"You have to input your own Gravitational Constant\n"+"Potential Energy = Mass * Gravitational Constant * (Final Height - Initial Height)"};mechanics.power=function(){return"The Power Equation\n"+"Inputs are: Force, Velocity.\n"+"Power = Force * Velocity"};mechanics.centripetalVelocity=function(){return"The Centripetal Acceleration Equation - with Velocity\n"+"Inputs are: Velocity, Radius.\n"+"Centripetal Acceleration = Velocity^2 / Radius"};mechanics.selfCentripetalVelocity=function(){return"The Calculated Centripetal Acceleration Equation - with Velocity\n"+"Inputs are: Velocity^2, Radius.\n"+"You input the Velocity^2\n"+"Centripetal Acceleration = Velocity / Radius"};mechanics.centripetalTime=function(){return"The Centripetal Acceleration Equation - with Time\n"+"Inputs are: Radius, Time.\n"+"Centripetal Acceleration = (4 * Pi^2 * Radius) / (Time^2)"};mechanics.selfCentripetalTime=function(){return"The Calculated Centripetal Acceleration Equation - with Time\n"+"Inputs are: Radius, Time.\n"+"Centripetal Acceleration = (4 * Pi^2 * Radius) / (Time^2)"}},{}],6:[function(require,module,exports){quantum=exports;quantum.energy=function(){return"Energy\n"+"Inputs: Mass.\n"+"E = Mass * Speed of Light^2"};quantum.energyLight=function(){return"Energy of a quanta of light\n"+"Inputs: Frequency.\n"+"E = Plancks Constant * Frequency"};quantum.momentum=function(){return"Momentum of quanta\n"+"Inputs: Wavelength.\n"+"Momentum = Plancks Constant / Wavelength"};quantum.deBroglie=function(){return"De Broglie wavelength\n"+"Inputs: Momentum\n"+"Wave Length = Plancks Constant / Momentum"};quantum.uncPosition=function(){return"Lower-bound to uncertainty in position\n"+"Inputs: Uncertainty in Momentum\n"+"Lower-bound of Position >= (Plancks Constant / 4 * pi) * (1 / Momentum)"};quantum.uncMomentum=function(){return"Lower-bound to uncertainty in momentum\n"+"Inputs: Uncertainty in Position\n"+"Lower-bound of Momentum >= (Plancks Constant / 4 * pi) * (1 / Position)"};quantum.maxKineticEnergy=function(){return"Maximum kinetic energy of emitted electrons incident with a frequency f upon a metal with a work function W\n"+"Inputs: Work function (Joules), Frequency\n"+"Kinetic Energy = Plancks Constant * Frequency - Work function"};quantum.minWork=function(){return"Minimum energy required to delocalize an electron from the surface of a metal\n"+"Inputs: Threshold frequency\n"+"Work = Plancks Constant * Threshold frequency"};quantum.thresholdFreq=function(){return"Minimum frequency required to induce photoelectric effect\n"+"Inputs: Work\n"+"Minimum frequency = Work / Plancks Constant"};quantum.energyLevels=function(){return"Electron In a Box Experiment: Energy Levels\n"+"Inputs: Mass, Width of the well, State with quantum number\n"+"Energy Levels = (State with quantum number^2 * Plancks Constant^2) / (8 * Mass * Width of the well^2)"};quantum.decay=function(){return"Rates of Radioactive Decay\n"+"Inputs: Number of atoms, Decays per unit time, Time\n"+"Number of atoms decayed = Number of atoms * e ^ (- Decays per unit time is a constant fraction * Time)"};quantum.halflife=function(){return"Half Life\n"+"Inputs: Decay Constant\n"+"Half Life = ln(2) / (Decay Constant)"};quantum.activity=function(){return"Activity, in number of counts per second\n"+"Inputs: Number of atoms Decayed, Decay Constant\n"+"Activity = lambda * Number of Atoms Decayed"};quantum.activityE=function(){return"Activity, in number of counts per second\n"+"Inputs: Number of atoms Decayed, Decay Constant, Time\n"+"A = Decay Constant * (Number of atoms * e ^ (- Decays per unit time is a constant fraction * Time))"}},{}],7:[function(require,module,exports){thermal=exports;thermal.pressure=function(){return"Pressure Equation\n"+"Inputs are: Force, Area\n"+"Pressure = Force / Area"};thermal.heat=function(){return"Calculated Heat Equation\n"+"Inputs are: Mass, Specific Heat Capacity, Initial Time, Final Time\n"+"Heat = Mass * Specific Heat Capacity, (Final Time - Initial Time)"};thermal.selfheat=function(){return"Heat Equation\n"+"Inputs are: Mass, Specific Heat Capacity, Change in Temperature\n"+"Heat = Mass * Specific Heat Capacity, Change in Temperature"};thermal.latentHeat=function(){return"Latent Heat Equation\n"+"Inputs are: Mass, Latent Heat of Fusion or Vaporization\n"+"Heat = Mass * Latent Heat of Fusion or Vaporization"};thermal.idealGasPV=function(){return"Ideal Gas Equation\n"+"Inputs are: Number of Moles, Temperature\n"+"Pressure * Volume = Number of Moles * Gas Constant * Time"};thermal.work=function(){return"Calculated Work Done Equation\n"+"Inputs are: Pressure, Initial Volume, Final Volume\n"+"Work = Pressure * (Final Volume - Initial Volume)"};thermal.selfwork=function(){return"Work Done Equation\n"+"Inputs are: Pressure, Volume\n"+"Work = Pressure * Volume"};thermal.heatChange=function(){return"Calculated Heat Change Equation\n"+"Inputs are: Work Done, Initial Energy Change, Final Energy Change\n"+"Heat = (Final Energy Change - Initial Energy Change) * Work Done"};thermal.selfheatChange=function(){return"Heat Change Equation\n"+"Inputs are: Work Done, Internal Energy Change\n"+"Heat = Change in Energy Change * Work Done"}},{}],8:[function(require,module,exports){wave=exports;wave.angularFrequency=function(){return"Angular Frequency\n"+"Inputs are: Time\n"+"Angular Frequency = 2 * pi / Time"};wave.displacement=function(){return"Displacement(x) of a particle from an arbitrarily defined equilibrium point at time = t\n"+"Inputs are: Amplitude of oscillation, Angular frequency, Time\n"+"Displacement(Time) = Amplitude of oscillation * sin(Angular frequency * Time)"};wave.velocity=function(){return"Velocity(v) of a particle from an arbitrarily defined equilibrium point at time = t\n"+"Inputs are: Angular frequency, Amplitude of oscillation, Time\n"+"Velocity(Time) = Angular frequency * Amplitude of oscillation * cos(Angular frequency * Time)"};wave.acceleration=function(){return"Acceleration (a) of a particle from an arbitrarily defined equilibrium point at time = t\n"+"Inputs are: Angular frequency, Amplitude of oscillation, Time\n"+"Acceleration(Time) = -Angular frequency^2 * Amplitude of oscillation * sin(Angular frequency * Time)"};wave.kineticEnergy=function(){return"Kinetic energy (K) of a particle undergoing simple harmonic motion\n"+"Inputs are: Mass of particle, Angular frequency, Amplitude of oscillation, Displacement from equilibrium point\n"+"Kinetic energy = 0.5 * Mass of particle * Angular frequency^2 * (Amplitude^2 - Displacement^2)"};wave.potentialEnergy=function(){return"Potential energy of a particle undergoing simple harmonic motion\n"+"Inputs are: Mass of particle, Angular frequency, Displacement from equilibrium point\n"+"Potential energy = 0.5 * Mass of particle * Angular frequency^2 * Displacement^2"};wave.netEnergy=function(){return"Total energy (E) of a particle undergoing simple harmonic motion\n"+"Inputs are: Mass of particle, Angular frequency,  Amplitude of oscillation\n"+"Total energy = 0.5 * Mass of particle * Angular frequency^2 * Amplitude^2"};wave.waveSpeed=function(){return"Wave Speed\n"+"Inputs are: Frequency, Wavelength\n"+"Wave Speed = Frequency * Wavelength"};wave.refractiveIndex=function(){return"Refractive Index of an unknown material\n"+"Inputs are: Wave speed in known medium, Wave speed in unknown medium, Refractive Index of known medium\n"+"Refractive Index = (Refractive Index of Known * Wave speed of Known) / Wave speed of Unknown"};wave.angularResolution=function(){return"Minimum angular resolution (in rads) required to distinguish two bodies or a measure of image quality\n"+"Inputs are: Wavelength of incident light, Diameter of aperature\n"+"Minimum angular resolution = 1.22 * (Wavelength / Diameter)"};wave.beatFrequency=function(){return"Acoustic beat frequency of two waves\n"+"Inputs are: Frequency of first wave, Frequency of second wave\n"+"Acoustic beat frequency = |Frequency of second wave - Frequency of first wave|"};wave.harmonicLen=function(){return"Wavelength of the nth harmonic\n"+"Inputs are: Length of string, nth harmonic\n"+"Wavelength = 2 * Length / nth harmonic"};wave.harmonicFreq=function(){return"Frequency of the nth harmonic\n"+"Inputs are: Wave speed, Length of string, Nth harmonic\n"+"Frequency = Wave speed / (2 * Length / Nth harmonic)"}},{}],9:[function(require,module,exports){var phys=exports;phys.constants=require("./phys/constants/constants");phys.multiplier=require("./phys/constants/multiplier");phys.units=require("./phys/constants/units");phys.basic=require("./phys/basic");phys.mechanics=require("./phys/mechanics");phys.thermal=require("./phys/thermal");phys.wave=require("./phys/wave");phys.wave=require("./phys/wave");phys.fields=require("./phys/fields");phys.electromagnetic=require("./phys/electromagnetic");phys.quantum=require("./phys/quantum");phys.information=require("./information/basic");phys.information.mechanics=require("./information/mechanics");phys.information.thermal=require("./information/thermal");phys.information.wave=require("./information/wave");phys.information.energy=require("./information/energy");phys.information.fields=require("./information/fields");phys.information.electromagnetic=require("./information/electromagnetic");phys.information.quantum=require("./information/quantum")},{"./information/basic":1,"./information/electromagnetic":2,"./information/energy":3,"./information/fields":4,"./information/mechanics":5,"./information/quantum":6,"./information/thermal":7,"./information/wave":8,"./phys/basic":10,"./phys/constants/constants":11,"./phys/constants/multiplier":12,"./phys/constants/units":13,"./phys/electromagnetic":14,"./phys/fields":15,"./phys/mechanics":16,"./phys/quantum":17,"./phys/thermal":18,"./phys/wave":19}],10:[function(require,module,exports){var basic=exports;basic.changein=function(p1,p2,callback){var ans=p2-p1;if(typeof callback==="function"){callback(ans);return ans}return ans};basic.twosig=function(number,callback){var ans=number.toFixed(2);if(typeof callback==="function"){callback(ans);return ans}return ans};basic.toDegrees=function(radians,callback){var ans=radians*(180/Math.PI);if(typeof callback==="function"){callback(ans);return ans}return ans};basic.toRadians=function(degrees,callback){var ans=degrees*(Math.PI/180);if(typeof callback==="function"){callback(ans);return ans}return ans}},{}],11:[function(require,module,exports){var constants=exports;var multiplier=require("./multiplier");constants.gAcceleration=9.81;constants.gAccelerationUnit="ms^-2";constants.GravitationalConstant=6.67*Math.pow(10,-11);constants.GravitationalConstantUnit="Nm^2kg^-2";constants.AvogadrosConstant=6.02*Math.pow(10,23);constants.AvogadrosConstantUnit="mol^-1";constants.GasConstant=8.31;constants.GasConstantUnit="J/K^-1mol^-1";constants.BoltzmannsConstant=1.38*Math.pow(10,-23);constants.BoltzmannsConstantUnit="JK^-1";constants.StefanBoltzmannConstant=5.67*Math.pow(10,-8);constants.StefanBoltzmannConstantUnit="Wm^-2K^-4";constants.CoulombConstant=8.99*Math.pow(10,9);constants.CoulombConstantUnit="Nm^2C^-2";constants.PermittivityFreeSpace=8.85*Math.pow(10,-12);constants.PermittivityFreeSpaceUnit="C^2N^-1m^-2";constants.PermeabilityFreeSpace=4*Math.PI*Math.pow(10,-7);constants.PermeabilityFreeSpaceUnit="TmA^-1";constants.SpeedofLightVacuum=3*Math.pow(10,8);constants.SpeedofLightVacuumUnit="ms^-1";constants.PlancksConstant=6.63*Math.pow(10,-34);constants.PlancksConstantUnit="Js";constants.ElementaryCharge=1.6*Math.pow(10,-19);constants.ElementaryChargeUnit="C";constants.ElectronRestMassKG=9.11*Math.pow(10,-31);constants.ElectronRestMassKGUnit="kg";constants.ElectronRestMassU=549e-6;constants.ElectronRestMassUUnit="u";constants.ElectronRestMasseV=.511*multiplier.M;constants.ElectronRestMasseVUnit="eVc^-2";constants.ProtonRestMassKG=1.673*Math.pow(10,-27);constants.ProtonRestMassKGUnit="kg";constants.ProtonRestMassU=1.007276;constants.ProtonRestMassUUnit="u";constants.ProtonRestMasseV=938*multiplier.M;constants.ProtonRestMasseVUnit="eVc^-2";constants.NeutronRestMassKG=1.675*Math.pow(10,-27);constants.NeutronRestMassKGUnit="kg";constants.NeutronRestMassU=1.008665;constants.NeutronRestMassUUnit="u";constants.NeutronRestMasseV=940*multiplier.M;constants.NeutronRestMasseVUnit="eVc^-2";constants.UnifiedAtomicMassKG=1.661*Math.pow(10,-27);constants.UnifiedAtomicMassKGUnit="kg";constants.UnifiedAtomicMasseV=931.5*multiplier.M;constants.UnifiedAtomicMasseVUnit="eVc^-2"},{"./multiplier":12}],12:[function(require,module,exports){var multiplier=exports;multiplier.T=Math.pow(10,12);multiplier.G=Math.pow(10,9);multiplier.M=Math.pow(10,6);multiplier.k=Math.pow(10,3);multiplier.h=Math.pow(10,2);multiplier.da=Math.pow(10,1);multiplier.d=Math.pow(10,-1);multiplier.c=Math.pow(10,-2);multiplier.m=Math.pow(10,-3);multiplier.u=Math.pow(10,-6);multiplier.n=Math.pow(10,-9);multiplier.p=Math.pow(10,-12);multiplier.f=Math.pow(10,-15)},{}],13:[function(require,module,exports){var units=exports,multiplier=require("./multiplier");units.lightyear=9.46*Math.pow(10,15);units.lightyearUnit="m";units.parsec=3.261;units.parsecUnit="y";units.astronomical=1.5*Math.pow(10,11);units.astronomicalUnit="m";units.radian=180/Math.Pi;units.radianUnit="Degrees";units.kilowatthour=3.6*Math.pow(10,6);units.kilowatthourUnit="J";units.atmNM=1.01*Math.pow(10,5);units.atmNMUnit="Nm^-2";units.atmPa=101*multiplier.k;units.atmPaUnit="Pa";units.atmHG=760;units.atmHGUnit="mmHg"},{"./multiplier":12}],14:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var electromagnetic=exports;electromagnetic.KineticEnergy=function(m,v,callback){var ans=1/2*(m*Math.pow(v,2));if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.selfKineticEnergy=function(m,v,callback){var ans=1/2*(m*v);if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.current=function(q1,q2,t1,t2,callback){var ans=basic.changein(q1,q2)/basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.ohmicResistance=function(V,I,callback){var ans=V/I;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.resistivity=function(R,L,A,callback){var ans=R*A/L;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.viPower=function(V,I,callback){var ans=V*I;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.irPower=function(I,R,callback){var ans=Math.pow(I,2)*R;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.selfirPower=function(I,R,callback){var ans=I*R;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.vPower=function(V,R,callback){var ans=Math.pow(V,2)/R;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.selfvPower=function(V,R,callback){var ans=V/R;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.emf=function(I,R,r,callback){var ans=I*(R+r);if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.series=function(resistances,callback){var ans=0;for(var resistance in resistances){ans+=resistance}if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.parallel=function(resistances,callback){var sumResistance=0;for(var resistance in resistances){sumResistance+=1/resistance}var ans=1/sumResistance;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.fluxComponent=function(B,A,theta,callback){var ans=B*A*Math.cos(basic.toRadians(theta));if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.inducedEmf=function(B,v,l,callback){var ans=B*v*l;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.gauss=function(Q,callback){var ans=Q/constant.CoulombConstant;if(typeof callback==="function"){callback(ans);return ans}return ans};electromagnetic.coilEmf=function(n,magFlux1,magFlux2,t1,t2,callback){var ans=-1*n*basic.changein(magFlux1,magFlux2)/basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}],15:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var fields=exports;fields.gravitationalForce=function(mone,mtwo,r,callback){var ans=constant.GravitationalConstant*(mone*mtwo/Math.pow(r,2));if(typeof callback==="function"){callback(ans);return ans}return ans};fields.selfGravitationalForce=function(mone,mtwo,r,g,callback){var ans=g*(mone*mtwo/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.coulombForce=function(qone,qtwo,r,callback){var ans=constant.CoulombConstant*(qone*qtwo/Math.pow(r,2));if(typeof callback==="function"){callback(ans);return ans}return ans};fields.selfCoulombForce=function(qone,qtwo,r,k,callback){var ans=k*(qone*qtwo/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.gravitationalAcceleration=function(F,m,callback){var ans=F/m;if(typeof callback==="function"){callback(ans);return ans}return ans};fields.electricField=function(F,q,callback){var ans=F/q;if(typeof callback==="function"){callback(ans);return ans}return ans};fields.gradElectricField=function(v1,v2,x1,x2,callback){var ans=-1*basic.changein(v1,v2)/basic.changein(x1,x2);
if(typeof callback==="function"){callback(ans);return ans}return ans};fields.gradGravField=function(u1,u2,x1,x2,callback){var ans=-1*basic.changein(u1,u2)/basic.changein(x1,x2);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.particleMagneticForce=function(q,v,B,theta,callback){var ans=q*v*B*Math.sin(basic.toRadians(theta));if(typeof callback==="function"){callback(ans);return ans}return ans};fields.conductorMagneticForce=function(B,I,l,theta,callback){var ans=B*I*l*Math.sin(basic.toRadians(theta,callback));if(typeof callback==="function"){callback(ans);return ans}return ans};fields.particleGravitationalPotentialEnergy=function(m,M,r,callback){var ans=-1*constant.GravitationalConstant*(m*M/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.selfparticleGravitationalPotentialEnergy=function(m,M,r,g,callback){var ans=-1*g*(m*M/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.gravitationalPotentialEnergy=function(M,r,callback){var ans=-1*constant.GravitationalConstant*(M/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.escapeVelocity=function(M,r,callback){var ans=Math.sqrt(2*constant.GravitationalConstant*(M/r));if(typeof callback==="function"){callback(ans);return ans}return ans};fields.chargeElectricPotentialEnergy=function(Q,q,r,callback){var ans=basic.CoulombConstant*(Q*q/r);if(typeof callback==="function"){callback(ans);return ans}return ans};fields.electricPotentialEnergy=function(Q,r,callback){var ans=basic.CoulombConstant*(Q/r);if(typeof callback==="function"){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}],16:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var mechanics=exports;mechanics.momentum=function(m,v,callback){var ans=m*v;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.force=function(m,callback){var ans=m*constant.gAcceleration;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfForce=function(m,g,callback){var ans=m*g;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.forceMomentum=function(m1,v1,m2,v2,t1,t2,callback){var ans=basic.changein(mechanics.momentum(m1,v1),mechanics.momentum(m2,v2))/basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfForceMomentum=function(p1,p2,t1,t2,callback){var ans=basic.changein(p1,p2)/basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.SUVATuta=function(u,t,a,callback){var ans=u*t+1/2*a*Math.pow(t,2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.SUVATuvt=function(u,v,t,callback){var ans=1/2*((u+v)*t);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.SUVATvta=function(v,t,a,callback){var ans=v*t-1/2*a*Math.pow(t,2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.SUVATuat=function(u,a,t,callback){var ans=u+a*t;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.SUVATuas=function(u,a,s,callback){var ans=Math.pow(u,2)+2*a*s;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfSUVATuas=function(u,a,s,callback){var ans=Math.sqrt(mechanics.SUVATuas(u,a,s));if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.impulseMass=function(m,v1,v2,callback){var ans=m*basic.changein(v1,v2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.impulseForce=function(f,t1,t2,callback){var ans=f*basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.workDone=function(f,s,angle,callback){var ans=f*s*Math.cos(angle);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.kineticVelocity=function(v,m,callback){var ans=1/2*m*Math.pow(v,2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.kineticMomentum=function(v,m,callback){var ans=Math.pow(mechanics.momentum(m,v),2)/(2*m);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfKineticMomentum=function(p,m,callback){var ans=Math.pow(p,2)/(2*m);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.potential=function(m,h1,h2,callback){var ans=m*constant.gAcceleration*basic.changein(h1,h2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfPotential=function(m,g,h1,h2,callback){var ans=m*g*basic.changein(h1,h2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.power=function(f,v,callback){var ans=f*v;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.centripetalVelocity=function(v,r,callback){var ans=Math.pow(v,2)/r;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfCentripetalVelocity=function(v,r,callback){var ans=v/r;if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.centripetalTime=function(r,t,callback){var ans=4*Math.pow(Math.PI,2)*r/Math.pow(t,2);if(typeof callback==="function"){callback(ans);return ans}return ans};mechanics.selfCentripetalTime=function(r,t,callback){var ans=4*Math.pow(Math.PI,2)*r/t;if(typeof callback==="function"){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}],17:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var quantum=exports;quantum.energy=function(mass,callback){var ans=Math.pow(constant.SpeedofLightVacuum,2)*mass;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.energyLight=function(f,callback){var ans=constant.PlancksConstant*f;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.momentum=function(waveLen,callback){var ans=constant.PlancksConstant/waveLen;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.deBroglie=function(p,callback){var ans=constant.PlancksConstant/p;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.uncPosition=function(dMomentum,callback){var ans=constant.PlancksConstant/(4*Math.PI*dMomentum);if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.uncMomentum=function(dPosition,callback){var ans=constant.PlancksConstant/(4*Math.PI*dPosition);if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.maxKineticEnergy=function(W,f,callback){var ans=constant.PlancksConstant*f-W;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.minWork=function(f0,callback){var ans=constant.PlancksConstant*f0;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.thresholdFreq=function(W,callback){var ans=W/constant.PlancksConstant;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.energyLevels=function(n,m,l,callback){var ans=Math.pow(n,2)*Math.pow(constant.PlancksConstant,2)/(8*m*Math.pow(l,2));if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.decay=function(n,lambd,time,callback){var ans=n*Math.pow(Math.E,-1*lambd*time);if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.halflife=function(lambd,callback){var ans=Math.log(2)/lambd;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.activity=function(N,L,callback){var ans=N*L;if(typeof callback==="function"){callback(ans);return ans}return ans};quantum.activityE=function(N,L,t,callback){var ans=L*quantum.decay(N,L,t);if(typeof callback==="function"){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}],18:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var thermal=exports;thermal.pressure=function(f,a,callback){var ans=f/a;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.heat=function(m,shc,t1,t2,callback){var ans=m*shc*basic.changein(t1,t2);if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.selfheat=function(m,shc,t,callback){var ans=m*shc*t;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.latentHeat=function(m,l,callback){var ans=m*l;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.idealGasPV=function(n,t,callback){var ans=n*constant.GasConstant*t;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.work=function(p,v1,v2,callback){var ans=p*basic.changein(v1,v2);if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.selfwork=function(p,v,callback){var ans=p*v;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.heatChange=function(u1,u2,w,callback){var ans=basic.changein(u1,u2)+w;if(typeof callback==="function"){callback(ans);return ans}return ans};thermal.selfheatChange=function(u,w,callback){var ans=u+w;if(typeof callback==="function"){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}],19:[function(require,module,exports){var constant=require("./constants/constants");var units=require("./constants/units");var multiplier=require("./constants/multiplier");var basic=require("./basic");var wave=exports;wave.angularFrequency=function(T,callback){var ans=2*Math.Pi/T;if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.displacement=function(A,w,t,callback){var ans=A*Math.sin(w*t);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.velocity=function(w,A,t,callback){var ans=w*A*Math.cos(w*t);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.acceleration=function(w,A,t,callback){var ans=Math.pow(-1*w,2)*A*Math.sin(w*t);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.kineticEnergy=function(m,w,A,x,callback){var ans=.5*m*Math.pow(w,2)*(Math.pow(A,2)-Math.pow(x,2));if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.potentialEnergy=function(m,w,x,callback){var ans=.5*m*Math.pow(w,2)*Math.pow(x,2);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.netEnergy=function(m,w,A,callback){var ans=.5*m*Math.pow(w,2)*Math.pow(A,2);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.waveSpeed=function(frequency,wavelength,callback){var ans=frequency*wavelength;if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.refractiveIndex=function(v1,v2,n1,callback){var ans=n1*v1/v2;if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.angularResolution=function(wavelength,d,callback){var ans=1.22*(wavelength/d);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.beatFrequency=function(f1,f2,callback){var ans=Math.abs(f2-f1);if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.harmonicLen=function(L,n,callback){var ans=2*L/n;if(typeof callback==="function",callback){callback(ans);return ans}return ans};wave.harmonicFreq=function(v,L,n,callback){var ans=v/wave.harmonicLen(L,n);if(typeof callback==="function",callback){callback(ans);return ans}return ans}},{"./basic":10,"./constants/constants":11,"./constants/multiplier":12,"./constants/units":13}]},{},[9]);