/**
 * electromagnetic.js
 * http://github.com/abhiagarwal/phys.js
 *
 * Copyright 2013 Abhi Agarwal
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var constant = require('./constants/constants');
var units = require('./constants/units');
var multiplier = require('./constants/multiplier');
var basic = require('./basic');
var fields = exports;

/*
* Rate at which charge flows through a given surface
@param {Number} Charge (q1, q2)
@param {Number} Time (t1, t2)
@return {Number} current I = dQ / dt
*/

electromagnetic.current = function (q1, q2, t1, t2) {
  var ans = basic.changein(q1, q2) / basic.changein(t1, t2);
  return ans;
};

/*
* Resistance of an Ohmic resistor
@param {Number} Voltage (V)
@param {Number} Current (I)
@return {Number} Resistance R = V / I
*/

electromagnetic.ohmicResistance = function (V, I) {
  var ans = V / I;
  return ans;
};

/*
* Resistivity - tendancy of a material to resist charge 
@param {Number} Resistance (R)
@param {Number} Cross-sectional area (A)
@param {Number} Length (L)
@return {Number} Resistivity res = R * A / L
*/

electromagnetic.resistivity = function (R, L, A) {
  var ans = R * A / L;
  return ans;
};

/*
* Power - Energy consumed per unit time. 
@param {Number} Voltage (V)
@param {Number} Current (I)
@return {Number} Power P = V * I
*/

electromagnetic.viPower = function (V, I) {
  var ans = V * I;
  return ans;
};

/*
* Power - Energy consumed per unit time. 
@param {Number} Current (I)
@param {Number} Resistance (V)
@return {Number} Power P = I ^ 2 * R
*/
electromagnetic.irPower = function (I, R) {
  var ans = Math.pow(I, 2) * R;
  return ans;
};

/*
* Electromotive Force - Voltage generated by a battery
@param {Number} Current (I)
@param {Number} Resistance (R)
@param {Number} Internal resistance of battery (r)
@return {Number} emf = I(R + r)
*/
electromagnetic.emf = function (I, R, r) {
  var ans = I * (R + r);
  return ans;
};

/*
* Sum of resistance components connected in series
@param {Number} Array of resistance values (resistances)
@return {Number} sumResistance = R_0 + R_1 + ... + R_(n - 1)
*/

electromagnetic.series = function (resistances) {
  var sumResistance = 0;
  for (var resistance in resistances) {
  		sumResistance += resistance;
  }
  return sumResistance;
};

/*
* Sum of resistance components connected in parallel
@param {Number} Array of resistance values (resistances)
@return {Number} sumResistance = R_0 + R_1 + ... + R_(n - 1)
*/

electromagnetic.parallel = function (resistances) {
  var sumResistance = 0;
  for (var resistance in resistances) {
  		sumResistance += (1 / resistance);
  }
  return (1 / sumResistance);
};
