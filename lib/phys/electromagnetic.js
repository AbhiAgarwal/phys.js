/**
 * electromagnetic.js
 * http://github.com/abhiagarwal/phys.js
 *
 * Copyright 2013 Abhi Agarwal
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * (17 functions)
 */

var constant = require('./constants/constants');
var units = require('./constants/units');
var multiplier = require('./constants/multiplier');
var basic = require('./basic');
var electromagnetic = exports;

// Kinetic Energy
// 
// electromagnetic.KineticEnergy(Mass, Velocity)
/*
@param {Number} m
@param {Number} v
@return {Number} Kinetic Energy = 1/2 * m * v^2
*/

electromagnetic.KineticEnergy = function (m, v) {
  var ans = (1/2) * (m * Math.pow(v, 2));
  return ans;
};

// Kinetic Energy
// 
// electromagnetic.selfKineticEnergy(Mass, Velocity^2)
// 
// Inputting the Velocity^2 Yourself
/*
@param {Number} m
@param {Number} v
@return {Number} Kinetic Energy = 1/2 * m * v^2
*/

electromagnetic.selfKineticEnergy = function (m, v) {
  var ans = (1/2) * (m * v)
  return ans;
};

// Rate at which charge flows through a given surface
// 
// electromagnetic.current(ChargeOne, ChargeTwo, TimeOne, TimeTwo)
/*
@param {Number} Charge (q1, q2)
@param {Number} Time (t1, t2)
@return {Number} current I = dQ / dt
*/

electromagnetic.current = function (q1, q2, t1, t2) {
  var ans = basic.changein(q1, q2) / basic.changein(t1, t2);
  return ans;
};

// Resistance of an Ohmic resistor
// 
// electromagnetic.ohmicResistance(Velocity, Current)
/*
@param {Number} Voltage (V)
@param {Number} Current (I)
@return {Number} Resistance R = V / I
*/

electromagnetic.ohmicResistance = function (V, I) {
  var ans = V / I;
  return ans;
};

// Resistivity - tendancy of a material to resist charge
// 
// electromagnetic.resistivity(Resistance, Cross-sectional Area, Length)
/* 
@param {Number} Resistance (R)
@param {Number} Cross-sectional area (A)
@param {Number} Length (L)
@return {Number} Resistivity res = R * A / L
*/

electromagnetic.resistivity = function (R, L, A) {
  var ans = R * A / L;
  return ans;
};

// Power - Energy consumed per unit time
// 
// electromagnetic.viPower(Velocity, Current)
/*
@param {Number} Voltage (V)
@param {Number} Current (I)
@return {Number} Power P = V * I
*/

electromagnetic.viPower = function (V, I) {
  var ans = V * I;
  return ans;
};

// Power - Energy consumed per unit time
// 
// electromagnetic.irPower(Current, Resistance)
/*
@param {Number} Current (I)
@param {Number} Resistance (V)
@return {Number} Power P = I ^ 2 * R
*/

electromagnetic.irPower = function (I, R) {
  var ans = Math.pow(I, 2) * R;
  return ans;
};

// Calculated Power - Energy consumed per unit time
// 
// electromagnetic.selfirPower(Current^2, Resistance)
// 
// Inputting the Current^2 Yourself
/*
@param {Number} Current (I)
@param {Number} Resistance (V)
@return {Number} Power P = I ^ 2 * R
*/

electromagnetic.selfirPower = function (I, R) {
  var ans = I * R;
  return ans;
};

// Power - Energy consumed per unit time
// 
// electromagnetic.vPower(Voltage, Resistance)
/*
@param {Number} Voltage (V)
@param {Number} Resistance (R)
@return {Number} Power P = V ^ 2 / R
*/

electromagnetic.vPower = function (V, R) {
  var ans = (Math.pow(V, 2)) / R;
  return ans;
};

// Calculated Power - Energy consumed per unit time
// 
// electromagnetic.selfvPower(Voltage^2, Resistance)
// 
// Inputting the Velocity^2 Yourself
/*
@param {Number} Voltage (V)
@param {Number} Resistance (R)
@return {Number} Power P = V ^ 2 / R
*/

electromagnetic.selfvPower = function (V, R) {
  var ans = V / R;
  return ans;
};

// Electromotive Force - Voltage generated by a battery
// 
// electromagnetic.emf(Current, Resistance, Internal resistance of battery)
/*
@param {Number} Current (I)
@param {Number} Resistance (R)
@param {Number} Internal resistance of battery (r)
@return {Number} emf = I(R + r)
*/

electromagnetic.emf = function (I, R, r) {
  var ans = I * (R + r);
  return ans;
};

// Sum of resistance components connected in series
// 
// electromagnetic.series(Array of Resistances)
/*
@param {Number} Array of resistance values (resistances)
@return {Number} sumResistance = R_0 + R_1 + ... + R_(n - 1)
*/

electromagnetic.series = function (resistances) {
  var sumResistance = 0;
  for (var resistance in resistances) {
  		sumResistance += resistance;
  }
  return sumResistance;
};

// Sum of resistance components connected in parallel
// 
// electromagnetic.parallel(Array of Resistances)
/*
@param {Number} Array of resistance values (resistances)
@return {Number} sumResistancetoReturn = 1/(R_0 + R_1 + ... + R_(n - 1))
*/

electromagnetic.parallel = function (resistances) {
  var sumResistance = 0;
  for (var resistance in resistances) {
  		sumResistance += (1 / resistance);
  }
  var sumResistancetoReturn = (1 / sumResistance);
  return sumResistancetoReturn;
};

// Component of B-field passing through a surface area A at an angle
// 
// electromagnetic.fluxComponent(B-field Strength, Surface area of surface, Angle)
/*
@param {Number} B-field Strength (B)
@param {Number} Surface area of surface (A)
@param {Number} Angle (in degrees) (theta)
@return {Number} magFlux = B * A * cos(theta)
*/

electromagnetic.fluxComponent = function (B, A, theta) {
  var magflux = B * A * Math.cos(basic.toRadians(theta));
  return magFlux;
};

// Induced voltage by moving a rod of length l through a B-field of velocity v
// 
// electromagnetic.inducedEmf(B-field Strength, Velocity of rod, Length)
/*
@param {Number} B-field Strength (B)
@param {Number} Velocity of rod (v)
@param {Number} Length (l)
@return {Number} inducedEmf = B * v * l
*/

electromagnetic.inducedEmf = function (B, v, l) {
  var indEmf = B * v * l;
  return indEmf;
};

// Gauss' Law: Rate of flow of electric field (Electric flux) through a closed surface with an arbitrary volume
// 
// electromagnetic.gauss(Total charge enclosed within the surface)
/*
@param {Number} Total charge enclosed within the surface (Q)
@return {Number} guassFlux = Q / k 
*/

electromagnetic.gauss = function (Q) {
  var gaussFlux = Q / constant.CoulombConstant;
  return gaussFlux;
}

// Faraday's Law: Induced emf generated by moving coil in B-field
// 
// electromagnetic.coilEmf(Number of turns in coil, Rate of change of magnetic flux One, Rate of change of magnetic flux Two, Time interval One, Time interval Two)
/*
@param {Number} Number of turns in coil (n)
@param {Number} Rate of change of magnetic flux (magFlux1, magFlux 2)
@param {Number} Time interval (t1, t2)
@return {Number} coilEmf = - n * (magFlux2 - magFlux1) / (t2 - t1)
*/

electromagnetic.coilEmf = function (n, magFlux1, magFlux2, t1, t2) {
  var ans = (-1 * n) * (basic.changein(magFlux1, magFlux2)) / (basic.changein(t1, t2));
  return ans;
}